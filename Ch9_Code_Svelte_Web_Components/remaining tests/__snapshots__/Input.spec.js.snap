// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests for Input get a snapshot of component 1`] = `
{
  "component": Input {
    "$$": {
      "after_update": [],
      "before_update": [],
      "bound": {},
      "callbacks": {},
      "context": Map {},
      "ctx": [
        "Label:",
        "example text",
        "text",
        false,
        "",
        "",
        {
          "class": "cobalt",
          "disabled": false,
          "id": "Input",
          "placeholder": "example text",
        },
      ],
      "dirty": [
        -1,
      ],
      "fragment": {
        "c": [Function],
        "d": [Function],
        "i": [Function],
        "l": [Function],
        "m": [Function],
        "o": [Function],
        "p": [Function],
      },
      "not_equal": [Function],
      "on_destroy": [
        [Function],
      ],
      "on_disconnect": [],
      "on_mount": [],
      "props": {
        "disabled": 3,
        "fieldID": 5,
        "fieldType": 2,
        "inputName": 4,
        "label": 0,
        "placeholder": 1,
      },
      "root": <div>
        <div
          class="cobalt svelte-1by29ot"
        >
          <label
            class="svelte-1by29ot"
            for="name"
          >
            Label:
          </label>
           
          <input
            class="cobalt svelte-1by29ot"
            data-testid="inputId"
            id="Input"
            name=""
            placeholder="example text"
            role="textbox"
            type="text"
          />
        </div>
      </div>,
      "skip_bound": false,
      "update": [Function],
    },
    "$$set": [Function],
    "$capture_state": [Function],
    "$inject_state": [Function],
  },
  "container": <body>
    <div>
      <div
        class="cobalt svelte-1by29ot"
      >
        <label
          class="svelte-1by29ot"
          for="name"
        >
          Label:
        </label>
         
        <input
          class="cobalt svelte-1by29ot"
          data-testid="inputId"
          id="Input"
          name=""
          placeholder="example text"
          role="textbox"
          type="text"
        />
      </div>
    </div>
  </body>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
